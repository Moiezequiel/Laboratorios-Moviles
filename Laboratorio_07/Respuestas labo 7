1-¿Qué ventajas tiene el utilizar LiveData?
R//Garantiza que la IU coincida con el estado de los datos: LiveData sigue el patrón de diseño observador.
*LiveData notifica a los objetos Observer cuando cambian los datos subyacentes. Puedes consolidar tu código
para actualizar la IU en esos objetos Observer
*Sin fugas de memoria: Los observadores están vinculados a objetos Lifecycle y borran lo que crean cuando se
destruye el ciclo de vida asociado.
*Actividades detenidas para evitar las fallas: Si el ciclo de vida del observador está inactivo, como en el caso
de una actividad de la pila de actividades, no recibe ningún evento de LiveData.
*No más control manual del ciclo de vida: Los componentes de IU solo observan los datos relevantes y no
detienen ni reanudan la observación. LiveData se ocupa automáticamente de todo esto, ya que está al tanto
de los cambios de estado del ciclo de vida relevantes mientras lleva a cabo la observación.
*Datos siempre actualizados: Si un ciclo de vida queda inactivo, recibe los datos más recientes después de
quedar activo de nuevo. Por ejemplo, una actividad que estuvo en segundo plano recibe los datos más
recientes inmediatamente después de volver al primer plano.

2-¿Qué patrón de diseño utiliza LiveData?
R//LiveData es un wrapper que se puede usar con cualquier dato, incluidos los objetos que implementan
Collections, cómo Listas. Por lo general, un objeto LiveData se almacena dentro de nuestro ViewModel. Luego realizamos
 nuestras validaciones para que este suscritos a datos tipo live data.
Se debe crear una nueva función llamada fun createMovie() la cual primeramente verificará por medio de la
función validateData(), si alguno de los datos se encuentra nulo o vacío, y si es así se encargará de actualizar el
estado del LiveData a Wrong Information y la función hará return para evitar que la función siga ejecutándose.



3-Menciona que se debe agregar al Gradle para poder implementar
DataBinding
R//Lo primero que se debe realizar para poder implementar DataBinding es preparar nuestro entorno de
desarrollo agregando la librería en nuestro proyecto, por lo que debemos dirigirnos a nuestro Gradle Scripts
seguido de build.gradle(Module:app), dentro del build.gradle debemos dirigirnos a la sección que dice android,
Ya tendremos activado el DataBinding en nuestro entorno de desarrollo, lo siguiente que se debe hacer es
implementarlo dentro de nuestro archivo de diseño para vincular nuestros componentes con nuestra fuente de
datos, en este caso estaremos vinculando nuestras vistas con el ViewModel.
Ahora es necesario dirigirse a fragment_new_movie.xml, añadir toda nuestra vista dentro de un layout que a su vez
tendrá dentro <data> que será utilizado para definir las variables que se usarán en la vinculación de datos en la
interfaz de usuario. Y dentro de <data> se define una nueva <variable> que tendrá como nombre “viewmodel” y el
type se le debe especificar la ruta en la que se encuentra nuestro MovieViewModel.
Ya que tenemos enlazado nuestro MovieViewModel con nuestro UI, ahora podremos acceder a todas las variables
dentro que fueron declaradas de tipo LiveData.


4-¿Qué es DataBinding? Menciona sus ventajas frente a findViewById
R//DataBinding es una función de Android que permite vincular los elementos de la interfaz de usuario (UI)
de una aplicación directamente a los datos de la aplicación, lo que significa que no es necesario realizar
actualizaciones manuales para que la interfaz refleje los cambios en los datos. DataBinding utiliza una sintaxis
especial en XML para crear una conexión entre la UI y los datos, lo que facilita la implementación de patrones de
arquitectura de software como el patrón MVVM (Model-View-ViewModel).
En lugar de tener que actualizar manualmente los elementos de la UI en el código, DataBinding permite que la UI
se actualice automáticamente a medida que los datos cambian en la aplicación. Esto significa que es posible
centrarse en la lógica de la aplicación en lugar de preocuparse por la sincronización de los datos y la UI.